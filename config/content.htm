<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323135">https://github.com/mdecp2024/hw-41323135</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323135/">https://mdecp2024.github.io/hw-41323135/</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w10</h3>
<p> 題目一:</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/aeebb92135ad6a276990c179c3406923/raw/70597c725835dff77717d8921e92b5a5771c814f/w10_triangle_.py">程式碼</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/OytW2gPj5Vg" width="560"></iframe></p>
<p> 題目二:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6JDnTmoXMKU" width="560"></iframe></p>
<p> 題目三:</p>
<p></p>
<p></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/czkpOXnhkvs" width="560"></iframe></p><h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/CLIjoXDze9o?si=AYC-PAV4jcghOggC" title="YouTube video player" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>題目一</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/e7b9fa05af4da1e3be39ebfec643a469/raw/226cdb34c43720ab0f0e32d69c099b9c7f69d490/w11_hw%2520circle%25E5%258F%25AF%25E6%2594%25B9size.py">程式碼</a></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/l5Pye7V84hs" width="560"></iframe></p>
<p>題目二</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/69689436f6143a11fc22139a3adfb15c/raw/e359498635a7b4017b5f53ea890d31daf2514077/w11_hw%2520circle%2520of%2520square.py">程式碼</a></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/airVrvKaOOw" width="560"></iframe></p>
<h3>w12_hw</h3>
<p><span>1. 請各組組員分別利用 </span><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/PjNEkq9p-9c" width="560"></iframe></p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p>01_string_input_print </p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/7043c7a73d3fda2f81579be714a550d6/raw/732e43dc2d9e9da0dcdc746d107c202383021dce/w12(1).py">程式碼</a></p>
<p>02_variables</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/3213cc5fcaa2d8aeddb899db3d18d5fd/raw/b5e97e7b01fd8ed20d4973a73d992823314011a9/w12(2).py">程式碼</a></p>
<p>=======</p>
<p>01_string_input_print</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/7043c7a73d3fda2f81579be714a550d6/raw/732e43dc2d9e9da0dcdc746d107c202383021dce/w12(1).py">程式碼</a></p>
<p>02_variables</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/3213cc5fcaa2d8aeddb899db3d18d5fd/raw/0f2bb6d43980e5a811c2b2a361ccb78eda4fd0b3/w12(2).py">程式碼</a></p>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; bdeedf832270094506b4e66fa5f24da1db3e1783</p>
<p><span>03_list_if_in_else</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/ea6b41409bff1a80f261ff859ec8ad6a/raw/9b5fc72e78afd8a2043de8e66456558e05a8a6e7/w12(3).py">程式碼</a></p>
<p><span>04_list_append_remove</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/f79f17e3a6b335adc73ac3347c659915/raw/7ee8afb2c615c39565516ce8c5e92afbb08c23af/w12(4).py">程式碼</a></p>
<p><span>05_list_index_pop_insert</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/4ea5c92cb6f4c511ee0b975e2ecf1e5d/raw/163aed46679d6ba7109005931da5915cd27c277c/w12(5).py">程式碼</a></p>
<p><span>06_list_slicing</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/e5f5f7b40b84fae94f181ebcfc705097/raw/8f8d2dbb9e973ae1f471db8258496718e36b5dfe/w12(6).py">程式碼</a></p>
<p><span>07_list_slicing_use</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/2bc95be7f662b8824ea5acfea64eab22/raw/9ccba6dc8eb29e1ab5b032f86f977e686a870e85/w12(7).py">程式碼</a></p>
<p><span>08_for_range</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/aece6f1d1d1614e3ac3c5293ef5aaa10/raw/0155a949472743ed7e7be77fb2cba73ca0871a29/w12(8).py">程式碼</a></p>
<p><span>09_for_loop_if_equals</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/fa1c97d7886e321bb0f6863ac36ab7c9/raw/ed535feea5f4cc459f627b0b3e3189d544aa1a98/w12(9).py">程式碼</a></p>
<p><span>10_for_search</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/0ed6580a93cd85fa731143a6e6d09618/raw/a5a647afee525376371087b6269afd44e05fd88a/w12(10).py">程式碼</a></span></p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/0ed6580a93cd85fa731143a6e6d09618/raw/a5a647afee525376371087b6269afd44e05fd88a/w12(10).py">程式碼</a></p>
<p></p>
<p></p>
<p></p>
<h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/4addcecb16dbbb71525318e50b74a29a/raw/8171cd9bb5983bd40d1c19b7921c3d195d975349/w13.py">程式連結</a></p>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; bdeedf832270094506b4e66fa5f24da1db3e1783</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){ 

brython({debug:1, pythonpath:['/static/','./../downloads/py/']}); 

}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 建立畫布
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 2  # 設定線條寬度

# 設定變數
square_size = 200  # 正方形邊長
offset = 100  # 垂直偏移量
x_offset = 100  # 水平偏移量

# 計算中心和半徑
first_square_center = (x_offset + square_size // 2, offset + square_size // 2)
second_square_center = (x_offset + square_size, offset + square_size)
circle_radius = square_size * math.sqrt(2) / 2

# 填充區域函數
def fill_shape(color, path_callback, exclusion_callback=None):
    ctx.save()
    if exclusion_callback:
        ctx.beginPath()
        exclusion_callback()
        ctx.clip()
    ctx.beginPath()
    path_callback()
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()
    ctx.restore()

# --- 區域填色開始 ---

# 1. 第一個正方形內部
fill_shape(
    "lightpink",
    lambda: ctx.rect(x_offset, offset, square_size, square_size)
)

# 2. 第二個正方形內部
fill_shape(
    "lightgreen",
    lambda: ctx.rect(first_square_center[0], first_square_center[1], square_size, square_size)
)

# 3. 第一個圓形（不排除正方形內部，先完整填色）
fill_shape(
    "lightblue",
    lambda: ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 4. 第二個圓形（不排除正方形內部，先完整填色）
fill_shape(
    "lightyellow",
    lambda: ctx.arc(second_square_center[0], second_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 5. 第一個正方形與第一個圓形交集部分（覆蓋重疊區域）
fill_shape(
    "purple",
    lambda: ctx.rect(x_offset, offset, square_size, square_size),
    lambda: ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 6. 第二個正方形與第二個圓形交集部分
fill_shape(
    "orange",
    lambda: ctx.rect(first_square_center[0], first_square_center[1], square_size, square_size),
    lambda: ctx.arc(second_square_center[0], second_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 7. 第一個圓形與第二個圓形交集部分
fill_shape(
    "lightcoral",
    lambda: ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi),
    lambda: ctx.arc(second_square_center[0], second_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 8. 第一個圓形、第二個正方形交疊部分
fill_shape(
    "cyan",
    lambda: ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi),
    lambda: ctx.rect(first_square_center[0], first_square_center[1], square_size, square_size)
)

# --- 繪製圖形輪廓 ---
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(x_offset, offset, square_size, square_size)  # 第一個正方形
ctx.stroke()

ctx.beginPath()
ctx.rect(first_square_center[0], first_square_center[1], square_size, square_size)  # 第二個正方形
ctx.stroke()

ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi)  # 第一個圓
ctx.stroke()

ctx.beginPath()
ctx.arc(second_square_center[0], second_square_center[1], circle_radius, 0, 2 * math.pi)  # 第二個圓
ctx.stroke()

# 9. 繪製斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(x_offset, offset)  # 左上角
ctx.lineTo(x_offset + square_size, offset + square_size)  # 右下角
ctx.stroke()
</script>
</p><h3>w14_ex</h3>
<p>請根據兩個圓繪圖所圍成的<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/a9d887546e024d52d16c228a6657146580342746/two_cicle_section_fill_ex.py">參考範例</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/7a086162a04783664bf64d9abd49da059634a0b4/multiple_circle_interaction_fill.py">多個圓相交區域著色範例</a></p>
<p>以下為參考範例的詳細說明, 請根據此一程式架構, 修改為三個圓的區域塗色任務.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math
 
# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
     
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
     
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx
 
# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串
 
# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² &lt;= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2
 
# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2):
    """
    根據傳入的兩個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
     
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
     
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}
 
    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None 
         
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
             
            if in_circle1 and in_circle2:
                # 如果點同時在兩個圓內，則是交集區域
                if "intersection" not in color_dict:
                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色
                    color_dict["intersection"] = random_color_generator()
                # 設置當前掃描線的顏色為交集區域的顏色
                current_color = color_dict["intersection"]
            elif in_circle1:
                # 如果點只在圓1內，則是圓1的區域
                if "circle1" not in color_dict:
                    # 如果還沒有為圓1分配顏色，則分配一個隨機顏色
                    color_dict["circle1"] = random_color_generator()
                # 設置當前掃描線的顏色為圓1區域的顏色
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內，則是圓2的區域
                if "circle2" not in color_dict:
                    # 如果還沒有為圓2分配顏色，則分配一個隨機顏色
                    color_dict["circle2"] = random_color_generator()
                # 設置當前掃描線的顏色為圓2區域的顏色
                current_color = color_dict["circle2"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色
 
            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素
 
# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
 
# 呼叫畫圓函式，並繪製兩個圓
draw_circles(x1, y1, r1, x2, y2, r2)</pre>
<p>三個圓</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
     
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
     
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² &lt;= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    x3, y3, r3 是圓3的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
     
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
     
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}

    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None 
         
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            # 判斷該點是否在圓3內
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
             
            if in_circle1 and in_circle2 and in_circle3:
                # 如果點同時在三個圓內，則是交集區域
                if "intersection" not in color_dict:
                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 如果點在圓1和圓2的交集區域（不含圓3）
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle1 and in_circle3:
                # 如果點在圓1和圓3的交集區域（不含圓2）
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle2 and in_circle3:
                # 如果點在圓2和圓3的交集區域（不含圓1）
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1:
                # 如果點只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 如果點只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色

            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 150, 100  # 圓3：圓心 (200, 150)，半徑 100

# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</pre>
<p></p>
<h3>w15</h3>
<p>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/8f7787be714169127014ee7f787d0f24/raw/b06e0775ed09daaca512805219e69da1dd1031f8/w15(1).py">anchor</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum_result = 0 #建立變數sum_result
i = 1 #指定i等於1
while i &lt;= 100:     #使用while迴圈把i加到等於100
    sum_result += i   
    i += 1
print(sum_result)</pre>
<p>題目二: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果.</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/041eb3aeb6666e223891907ae6024bc3/raw/2ab55b62b82a291ca32130f18b78c88b13ab0fbb/w15(2).py">addto</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#運算程式
def addto(start, end):   #定義函數addto
    sum_result = 0       #設定數值sum_result=0
    i = start            #設定i=start
    while i &lt;= end:      #設結束之值為end
        sum_result += i  
        i += 1
    return sum_result    #終止函數運行並返回數值至result
      
#調用程式
result = addto(1, 100)   #設定起始值
print(result)            #列印result</pre>
<p>題目三: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果.</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/5d19afae96ea60772d888261cdf1187c/raw/a9b57d2f4ed953929941340be6599100c201c6e5/w15(3).py">add_only_even </a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(start, end):
    """
    計算從 start 到 end 之間所有偶數的總和
 
    參數:
    start (int): 起始數字
    end (int): 結束數字
 
    回傳:
    int: 偶數的累加總和
    """
    # 使用 range 範圍產生器來選擇偶數
    even_numbers = range(start + (1 if start % 2 != 0 else 0), end + 1, 2)
     
    # 返回偶數的總和
    return sum(even_numbers)
 
# 測試函式
result = add_only_even(1, 100)
print(f"從 1 累加到 100 的偶數總和是: {result}")</pre>
<p><span>題目四: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, </span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/32974d6cc9c6c5945f9289339ecf00bf/raw/4afd09c79a9c2085ab0ca3f573dd442129a72594/w15(4).py">add_avoid_8 </a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(init, addto):
    #init = 1
    #addto = 100
    sum=0
    for i in range (init, addto+1):
        #print (i)
        sum += i
    print(sum)
 
def add_only_even(init, addto):
    #init = 1
    #addto = 100
    sum = 0
    for i in range(init+1, addto+1, 2):
        #print (i)
        sum += i
        #print(sum)
    print(sum)
 
def avoid8(init, addto):
    #init = 1
    #addto = 100
    sum = 0
    for i in range(init, addto+1):
        #print (i)
        # 判斷數值中有沒有 8
        if "8" in str(i):
            pass
        else:
            sum += i
            #print(i)
        #print(sum)
    print(sum)
     
#add_only_even(1, 100)
avoid8(1, 100)</pre>
<p><span></span></p>
<h1>HW 2</h1>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; aa6e6a6e29c0d1c17e24dd9e0a322fa0a894a098</p>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><span>題目: 請以</span><span>自己的學號最後四碼</span><span>作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像 (</span><a href="https://www.ccplusmedia.com/wp-content/uploads/2019/10/creative-ad_landscape3.jpg">圖片來源</a><span>).</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/379c719541f1c706fd84d76600fa2b3a/raw/d1e852d46447746da4b3acc9428ba3c6d2dd4ac6/WH%25202%2520Exam%2520.py">全圖形</a></p>
<p></p>
<p></p>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){ 

brython({debug:1, pythonpath:['/static/','./../downloads/py/']}); 

}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 2

# 設定線條顏色為橙色
ctx.strokeStyle = 'orange'

# 設定填充顏色為橘色
ctx.fillStyle = 'orange'  # 這裡設定填充顏色為橘色

# 繪製原來的多邊形，並填充顏色
ctx.beginPath()
ctx.moveTo(31, 35)  # 起點
ctx.lineTo(61, 35)  # 第一條線
ctx.lineTo(76, 61)  # 第二條線
ctx.lineTo(61, 87)  # 第三條線
ctx.lineTo(31, 87)  # 第四條線
ctx.lineTo(16, 61)  # 第五條線
ctx.lineTo(31, 35)  # 第六條線
ctx.closePath()  # 關閉路徑，這樣我們的形狀就變成了封閉的多邊形

# 填充顏色
ctx.fill()  # 填充橘色

# 繪製邊框 
ctx.stroke()  # 保留邊框線條  

# 繪製菱形 (綠色，並且變尖)
ctx.beginPath()
diamond_center_x = 120  # 菱形的中心X座標
diamond_center_y = 61   # 菱形的中心Y座標
diamond_vertical_size = 30  # 菱形的垂直邊長
diamond_horizontal_size = 20  # 菱形的水平邊長 (變小，讓菱形更尖)

# 計算菱形的四個頂點
ctx.moveTo(diamond_center_x, diamond_center_y - diamond_vertical_size)  # 上頂點
ctx.lineTo(diamond_center_x + diamond_horizontal_size, diamond_center_y)  # 右頂點
ctx.lineTo(diamond_center_x, diamond_center_y + diamond_vertical_size)  # 下頂點
ctx.lineTo(diamond_center_x - diamond_horizontal_size, diamond_center_y)  # 左頂點
ctx.closePath()  # 關閉路徑

# 填充菱形顏色
ctx.fillStyle = 'TEAL'  # 設定填充顏色為綠色
ctx.fill()  # 填充綠色

# 繪製菱形邊框
ctx.strokeStyle = 'teal'  # 設定邊框顏色為綠色
ctx.stroke()  # 保留邊框線條

# 繪製藍色正三角形
ctx.beginPath()

# 計算正三角形的三個頂點
triangle_base_length = 30  # 正三角形的邊長
triangle_height = (3 ** 0.5 / 2) * triangle_base_length  # 計算等邊三角形的高度

# 右下方的位置
triangle_x = diamond_center_x + diamond_horizontal_size + 5  # 菱形右側下方，稍微偏移
triangle_y = diamond_center_y + diamond_vertical_size + 0  # 位置稍微向下

# 設定三角形的三個頂點
# 左邊底點
ctx.moveTo(triangle_x - triangle_base_length / 2, triangle_y)
# 右邊底點
ctx.lineTo(triangle_x + triangle_base_length / 2, triangle_y)
# 頂點
ctx.lineTo(triangle_x, triangle_y - triangle_height)

# 關閉路徑
ctx.closePath()

# 填充三角形顏色
ctx.fillStyle = 'blue'  # 設定填充顏色為藍色
ctx.fill()

# 繪製三角形邊框
ctx.strokeStyle = 'blue'  # 設定邊框顏色為藍色
ctx.stroke()  # 保留邊框線條

# 繪製桃紅色圓形
ctx.beginPath()

# 圓形的圓心位置
circle_center_x = diamond_center_x + diamond_horizontal_size + 50  # 右邊偏移
circle_center_y = diamond_center_y  # 與菱形的Y座標對齊

# 圓形的半徑
circle_radius = 30

# 畫圓
ctx.arc(circle_center_x, circle_center_y, circle_radius, 0, 2 * 3.1416)  # 0 到 2π 弧度

# 填充顏色為桃紅色
ctx.fillStyle = 'deeppink'  # 桃紅色
ctx.fill()

# 繪製圓形邊框
ctx.strokeStyle = 'deeppink'  # 桃紅色邊框
ctx.stroke()  # 保留邊框線條

# 繪製正方形
ctx.beginPath()

# 計算正方形的左上角位置
square_size = 50  # 正方形邊長為50
square_x = circle_center_x + circle_radius + 10  # 放置於圓形的右邊
square_y = circle_center_y - square_size / 2  # 正方形垂直居中於圓形

# 繪製正方形
ctx.rect(square_x, square_y, square_size, square_size)

# 填充正方形顏色
ctx.fillStyle = 'yellow'  # 正方形填充顏色為黃色
ctx.fill()

# 繪製正方形邊框
ctx.strokeStyle = 'yellow'  # 正方形邊框顏色為黃色
ctx.stroke()  # 保留邊框線條

# 繪製深藍色長方形
ctx.beginPath()

# 長方形的尺寸
rectangle_width = 60  # 長方形的長度
rectangle_height = 20  # 長方形的高度

# 計算長方形的位置，將其放置在正方形的右側
rectangle_x = square_x + square_size + 10  # 放置於正方形右邊，留有間距
rectangle_y = square_y + (square_size - rectangle_height) / 2  # 垂直居中於正方形

# 繪製長方形
ctx.rect(rectangle_x, rectangle_y, rectangle_width, rectangle_height)

# 填充長方形顏色
ctx.fillStyle = 'darkblue'  # 長方形填充顏色為深藍色
ctx.fill()

# 繪製長方形邊框
ctx.strokeStyle = 'darkblue'  # 長方形邊框顏色為深藍色
ctx.stroke()  # 保留邊框線條
ctx.fillStyle = 'red'  # 設定文字顏色為紅色
ctx.font = '16px Arial'  # 設定文字大小及字型
ctx.fillText("起始點 (31, 35)", 60, 15)  # 在座標 (60, 15) 處繪製文字
ctx.fillStyle = 'black'  
ctx.font = '16px Arial'  
ctx.fillText("X", 50, 15)  
ctx.fillStyle = 'black' 
ctx.font = '16px Arial'  
ctx.fillText("Y", 0, 50)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.moveTo(0, 0) 
ctx.lineTo(50, 0)  
ctx.stroke()
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.moveTo(0, 0) 
ctx.lineTo(0, 50)  
ctx.stroke()
</script>
</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/eRPDd_OTETQ" width="560"></iframe></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<p></p>
<div id="brython_div1"></div>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><span>題目二: 請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/3c2ea049b03e3ea86060ce076a6e8b49/raw/291eb53a5c12f49059f49ac61c8033bb3f85790a/%25E5%259C%259F%25E7%2582%25AE%25E8%25BF%25B7%25E5%25AE%25AE.py">迷宮圖</a></p>
<p></p>
<p></p>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){ 

brython({debug:1, pythonpath:['/static/','./../downloads/py/']}); 

}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 2

ctx.strokeStyle = 'blue'  # 設定線顏色為藍色
ctx.beginPath()
ctx.moveTo(31, 35)  
ctx.lineTo(231, 35)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(31, 35) 
ctx.lineTo(31, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(331, 35) 
ctx.lineTo(531, 35)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(531, 35) 
ctx.lineTo(531, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(531, 535) 
ctx.lineTo(331, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(31, 535) 
ctx.lineTo(231, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(231, 535) 
ctx.lineTo(231, 435)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(231, 435) 
ctx.lineTo(331, 435)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(431, 535) 
ctx.lineTo(431, 335)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(431, 335) 
ctx.lineTo(131, 335)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(131, 335) 
ctx.lineTo(131, 435)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(331, 335) 
ctx.lineTo(331, 235)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(31, 235) 
ctx.lineTo(231, 235)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(231, 235) 
ctx.lineTo(231, 135)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(131, 135) 
ctx.lineTo(431, 135)  
ctx.stroke()
ctx.strokeStyle = 'blue'

ctx.beginPath()
ctx.moveTo(431, 135) 
ctx.lineTo(431, 235)  
ctx.stroke()
# 使用紅色字體標示起始點
ctx.fillStyle = 'red'  # 設定文字顏色為紅色
ctx.font = '16px Arial'  # 設定文字大小及字型
ctx.fillText("起始點 (31, 35)", 60, 50)  # 在座標 (31, 35) 處繪製文字
ctx.fillStyle = 'black'  
ctx.font = '16px Arial'  
ctx.fillText("X", 50, 15)  
ctx.fillStyle = 'black' 
ctx.font = '16px Arial'  
ctx.fillText("Y", 0, 50)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.moveTo(0, 0) 
ctx.lineTo(50, 0)  
ctx.stroke()
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.moveTo(0, 0) 
ctx.lineTo(0, 50)  
ctx.stroke()
</script>
</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6C6gA0-qaZo" width="560"></iframe></p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><span>題目三: 請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的黑色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 並且</span><span>利用紅色連續線段標示從上方入口, 走至下方出口的路線圖</span><span>.</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/4c726da9474209a99169fe3a211e9219/raw/7b59662f22e2b38ca2b7d29e8fb8f360849b31bc/%25E8%25BF%25B7%25E5%25AE%25AE%25E5%258F%258A%25E8%25B7%25AF%25E5%25BE%2591.py">迷宮及通關路線</a></p>
<p></p>
<p></p>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){ 

brython({debug:1, pythonpath:['/static/','./../downloads/py/']}); 

}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 2
# 使用紅色字體標示起始點
ctx.fillStyle = 'red'  # 設定文字顏色為紅色
ctx.font = '16px Arial'  # 設定文字大小及字型
ctx.fillText("起始點 (31, 35)", 60, 50)  # 在座標 (31, 35) 處繪製文字
ctx.fillStyle = 'black'  
ctx.font = '16px Arial'  
ctx.fillText("X", 50, 15)  
ctx.fillStyle = 'black' 
ctx.font = '16px Arial'  
ctx.fillText("Y", 0, 50) 
ctx.strokeStyle = 'blue'  # 設定線顏色為藍色
ctx.beginPath()
ctx.moveTo(31, 35)  
ctx.lineTo(231, 35)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(31, 35) 
ctx.lineTo(31, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(331, 35) 
ctx.lineTo(531, 35)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(531, 35) 
ctx.lineTo(531, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(531, 535) 
ctx.lineTo(331, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(31, 535) 
ctx.lineTo(231, 535)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(231, 535) 
ctx.lineTo(231, 435)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(231, 435) 
ctx.lineTo(331, 435)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(431, 535) 
ctx.lineTo(431, 335)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(431, 335) 
ctx.lineTo(131, 335)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(131, 335) 
ctx.lineTo(131, 435)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(331, 335) 
ctx.lineTo(331, 235)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(31, 235) 
ctx.lineTo(231, 235)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(231, 235) 
ctx.lineTo(231, 135)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(131, 135) 
ctx.lineTo(431, 135)  
ctx.stroke()
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(431, 135) 
ctx.lineTo(431, 235)  
ctx.stroke()
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(280, 27) 
ctx.lineTo(515, 180)  
ctx.stroke()
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(515, 180) 
ctx.lineTo(414, 300)  
ctx.stroke()
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(414, 300) 
ctx.lineTo(332, 187)  
ctx.stroke()
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(332, 187) 
ctx.lineTo(72, 358)  
ctx.stroke()
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(72, 358) 
ctx.lineTo(72, 512)  
ctx.stroke()
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(72, 512) 
ctx.lineTo(365, 352)  
ctx.stroke()
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(365, 352) 
ctx.lineTo(310, 542)  
ctx.stroke()
 
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.moveTo(0, 0) 
ctx.lineTo(50, 0)  
ctx.stroke()
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.moveTo(0, 0) 
ctx.lineTo(0, 50)  
ctx.stroke()
</script>
</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/xmD0lnQc4ho" width="560"></iframe>ee</p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Brython.html" title="brython">https://mde.tw/cp2024/content/Brython.html</a></p>
<pre></pre>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>