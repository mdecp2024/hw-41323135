<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323135">https://github.com/mdecp2024/hw-41323135</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323135/">https://mdecp2024.github.io/hw-41323135/</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w10</h3>
<p> 題目一:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/OytW2gPj5Vg" width="560"></iframe></p>
<p> 題目二:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6JDnTmoXMKU" width="560"></iframe></p>
<p> 題目三:</p>
<p></p>
<p></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/czkpOXnhkvs" width="560"></iframe></p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/CLIjoXDze9o?si=AYC-PAV4jcghOggC" title="YouTube video player" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>題目一</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/e7b9fa05af4da1e3be39ebfec643a469/raw/226cdb34c43720ab0f0e32d69c099b9c7f69d490/w11_hw%2520circle%25E5%258F%25AF%25E6%2594%25B9size.py">程式碼</a></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/l5Pye7V84hs" width="560"></iframe></p>
<p>題目二</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/69689436f6143a11fc22139a3adfb15c/raw/e359498635a7b4017b5f53ea890d31daf2514077/w11_hw%2520circle%2520of%2520square.py">程式碼</a></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/airVrvKaOOw" width="560"></iframe></p>
<h3>w12_hw</h3>
<p><span>1. 請各組組員分別利用 </span><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/PjNEkq9p-9c" width="560"></iframe></p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p>01_string_input_print </p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/7043c7a73d3fda2f81579be714a550d6/raw/732e43dc2d9e9da0dcdc746d107c202383021dce/w12(1).py">程式碼</a></p>
<p>02_variables</p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/3213cc5fcaa2d8aeddb899db3d18d5fd/raw/b5e97e7b01fd8ed20d4973a73d992823314011a9/w12(2).py">程式碼</a></p>
<p><span>03_list_if_in_else</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/ea6b41409bff1a80f261ff859ec8ad6a/raw/9b5fc72e78afd8a2043de8e66456558e05a8a6e7/w12(3).py">程式碼</a></p>
<p><span>04_list_append_remove</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/f79f17e3a6b335adc73ac3347c659915/raw/7ee8afb2c615c39565516ce8c5e92afbb08c23af/w12(4).py">程式碼</a></p>
<p><span>05_list_index_pop_insert</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/4ea5c92cb6f4c511ee0b975e2ecf1e5d/raw/163aed46679d6ba7109005931da5915cd27c277c/w12(5).py">程式碼</a></p>
<p><span>06_list_slicing</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/e5f5f7b40b84fae94f181ebcfc705097/raw/8f8d2dbb9e973ae1f471db8258496718e36b5dfe/w12(6).py">程式碼</a></p>
<p><span>07_list_slicing_use</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/2bc95be7f662b8824ea5acfea64eab22/raw/9ccba6dc8eb29e1ab5b032f86f977e686a870e85/w12(7).py">程式碼</a></p>
<p><span>08_for_range</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/aece6f1d1d1614e3ac3c5293ef5aaa10/raw/0155a949472743ed7e7be77fb2cba73ca0871a29/w12(8).py">程式碼</a></p>
<p><span>09_for_loop_if_equals</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/fa1c97d7886e321bb0f6863ac36ab7c9/raw/ed535feea5f4cc459f627b0b3e3189d544aa1a98/w12(9).py">程式碼</a></p>
<p><span>10_for_search</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/0ed6580a93cd85fa731143a6e6d09618/raw/a5a647afee525376371087b6269afd44e05fd88a/w12(10).py">程式碼</a></p>
<p></p>
<p></p>
<h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323135/content/Brython.html?src=https://gist.githubusercontent.com/41323135/4addcecb16dbbb71525318e50b74a29a/raw/8171cd9bb5983bd40d1c19b7921c3d195d975349/w13.py">程式連結</a></p>
<p>=======</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){ 

brython({debug:1, pythonpath:['/static/','./../downloads/py/']}); 

}
</script>
</p>
<div id="brython_div1"></div>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 建立畫布
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 2  # 設定線條寬度

# 設定變數
square_size = 200  # 正方形邊長
offset = 100  # 垂直偏移量
x_offset = 100  # 水平偏移量

# 計算中心和半徑
first_square_center = (x_offset + square_size // 2, offset + square_size // 2)
second_square_center = (x_offset + square_size, offset + square_size)
circle_radius = square_size * math.sqrt(2) / 2

# 填充區域函數
def fill_shape(color, path_callback, exclusion_callback=None):
    ctx.save()
    if exclusion_callback:
        ctx.beginPath()
        exclusion_callback()
        ctx.clip()
    ctx.beginPath()
    path_callback()
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()
    ctx.restore()

# --- 區域填色開始 ---

# 1. 第一個正方形內部
fill_shape(
    "lightpink",
    lambda: ctx.rect(x_offset, offset, square_size, square_size)
)

# 2. 第二個正方形內部
fill_shape(
    "lightgreen",
    lambda: ctx.rect(first_square_center[0], first_square_center[1], square_size, square_size)
)

# 3. 第一個圓形（不排除正方形內部，先完整填色）
fill_shape(
    "lightblue",
    lambda: ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 4. 第二個圓形（不排除正方形內部，先完整填色）
fill_shape(
    "lightyellow",
    lambda: ctx.arc(second_square_center[0], second_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 5. 第一個正方形與第一個圓形交集部分（覆蓋重疊區域）
fill_shape(
    "purple",
    lambda: ctx.rect(x_offset, offset, square_size, square_size),
    lambda: ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 6. 第二個正方形與第二個圓形交集部分
fill_shape(
    "orange",
    lambda: ctx.rect(first_square_center[0], first_square_center[1], square_size, square_size),
    lambda: ctx.arc(second_square_center[0], second_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 7. 第一個圓形與第二個圓形交集部分
fill_shape(
    "lightcoral",
    lambda: ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi),
    lambda: ctx.arc(second_square_center[0], second_square_center[1], circle_radius, 0, 2 * math.pi)
)

# 8. 第一個圓形、第二個正方形交疊部分
fill_shape(
    "cyan",
    lambda: ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi),
    lambda: ctx.rect(first_square_center[0], first_square_center[1], square_size, square_size)
)

# --- 繪製圖形輪廓 ---
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(x_offset, offset, square_size, square_size)  # 第一個正方形
ctx.stroke()

ctx.beginPath()
ctx.rect(first_square_center[0], first_square_center[1], square_size, square_size)  # 第二個正方形
ctx.stroke()

ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(first_square_center[0], first_square_center[1], circle_radius, 0, 2 * math.pi)  # 第一個圓
ctx.stroke()

ctx.beginPath()
ctx.arc(second_square_center[0], second_square_center[1], circle_radius, 0, 2 * math.pi)  # 第二個圓
ctx.stroke()

# 9. 繪製斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(x_offset, offset)  # 左上角
ctx.lineTo(x_offset + square_size, offset + square_size)  # 右下角
ctx.stroke()
</script>
<h3>w14_ex</h3>
<p>請根據兩個圓繪圖所圍成的<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/a9d887546e024d52d16c228a6657146580342746/two_cicle_section_fill_ex.py">參考範例</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/7a086162a04783664bf64d9abd49da059634a0b4/multiple_circle_interaction_fill.py">多個圓相交區域著色範例</a></p>
<p>以下為參考範例的詳細說明, 請根據此一程式架構, 修改為三個圓的區域塗色任務.</p><h3>w15</h3>
<h1>HW 2</h1>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; aa6e6a6e29c0d1c17e24dd9e0a322fa0a894a098</p>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Brython.html" title="brython">https://mde.tw/cp2024/content/Brython.html</a></p>
<pre></pre>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>